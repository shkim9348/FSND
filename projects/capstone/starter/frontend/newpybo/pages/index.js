import { useAuth0 } from "@auth0/auth0-react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import useSWR from "swr";
import Pagination from "@/components/pagination";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function Home() {
  const { isAuthenticated } = useAuth0();

  // router
  const router = useRouter();

  // useRef
  const searchRef = useRef();

  // page useState
  const [page, setPage] = useState(router.query.page || 1);

  // kw useState
  const [kw, setKw] = useState(router.query.kw || "");

  // question list
  const { data: questions, error } = useSWR(
    `${process.env.API_URL}/question/?page=${page}&kw=${kw}`,
    fetcher,
    {
      keepPreviousData: true,
      revalidateOnFocus: false,
    },
  );

  const onPageChange = (page) => {
    // update page state
    setPage(page);
  };

  const handleSearch = (e, kw) => {
    e.preventDefault();

    // update kw state
    setKw(kw);
  };

  // page, kw state가 변경될 때 라우터 업데이트
  useEffect(() => {
    if (router.query.page != page || router.query.kw != kw) {
      const query = {};
      if (page && page != 1) query.page = page;
      if (kw) query.kw = kw;

      //router
      router.push({ query: query });
    }
  }, [page, kw]);

  // 라우터가 변경될 때 page, kw state 업데이트
  useEffect(() => {
    if (router.query.page != page || router.query.kw != kw) {
      setPage(router.query.page || 1);
      setKw(router.query.kw || "");
    }

    // sync search input
    if (searchRef.current && searchRef.current.value != router.query.kw) {
      searchRef.current.value = router.query.kw || "";
    }
  }, [router.query.page, router.query.kw]);

  if (error) return <div>Failed to load</div>;
  if (!questions) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>Welcome to Pybo Board</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="container my-3">
          <div className="row my-3">
            <div className="col-6">
              {isAuthenticated ? (
                <Link href="/question/create" className="btn btn-primary">
                  Write the Question
                </Link>
              ) : (
                <button className="btn btn-primary" type="button" disabled>
                  Write the Question
                </button>
              )}
            </div>
            <div className="col-6">
              <form>
                <div className="input-group">
                  <input
                    ref={searchRef}
                    type="text"
                    className="form-control"
                    defaultValue={kw}
                    placeholder="Search the keyword"
                  />
                  <div className="input-group-append">
                    <button
                      className="btn btn-outline-secondary"
                      type="submit"
                      onClick={(e) => handleSearch(e, searchRef.current.value)}
                    >
                      Search
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
          <table className="table">
            <thead>
              <tr className="text-center table-dark">
                <th>No.</th>
                <th style={{ width: "50%" }}>Subject</th>
                <th>Wirter</th>
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {questions.questions.map(function (question, i) {
                return (
                  <tr className="text-center" key={question.id}>
                    <td>{questions.total - (questions.page - 1) * questions.per_page - i}</td>
                    <td className="text-start">
                      <Link href={`/question/?id=${question.id}`}>{question.subject}</Link>
                      {question.answer_set && question.answer_set.length > 0 && (
                        <span className="text-danger small mx-2">
                          {question.answer_set.length}
                        </span>
                      )}
                    </td>
                    <td>{question.user.username}</td>
                    <td>{new Date(question.create_date).toLocaleString("en")}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          <Pagination pagination={questions} onPageChange={onPageChange} />
        </div>
      </main>
    </>
  );
}
