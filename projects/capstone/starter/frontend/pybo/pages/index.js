import Head from "next/head";
import { Container, Row, Col, Button, InputGroup, Table } from "react-bootstrap";
import styles from "../styles/Home.module.css";
import PyboNavBar from "../components/pyboNavBar";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/router";
import useSWR from "swr";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function Home() {
  // router
  const router = useRouter();

  // useRef
  const searchRef = useRef();

  // page의 상태변수 생성(useState) 및 page history 지정(초기값)
  const savedPage = typeof window !== "undefined" && localStorage.getItem("page");
  const [page, setPage] = useState(savedPage || 1);

  // search의 상태변수 생성(useState) 및 kw & searchKw 초기값 지정
  const savedKw = typeof window !== "undefined" && localStorage.getItem("searchKw");
  const [kw, setKw] = useState(savedKw || "");
  const [searchKw, setSearchKw] = useState(savedKw || "");

  // useSWR
  const { data, error } = useSWR(
    `http://127.0.0.1:5000/question/list?page=${page}&kw=${kw}`,
    fetcher,
    {
      keepPreviousData: true,
    },
  );

  // useEffect를 이용하여 page router가 변경되었을 때 data 불러오기
  useEffect(() => {
    setPage(router.query.page || 1);
  }, [router.query.page]);

  useEffect(() => {
    setKw(router.query.kw || "");
    setSearchKw(router.query.kw || "")
  }, [router.query.kw]);
  
  // Page change handler
  const handlePageChange = (page) => {
    setPage(page);
    localStorage.setItem("page", page);
    // history
    router.push({ query: { page } });
  };

  // Search change handler
  const handleSearchChange = () => {
    setKw(searchRef.current.value);
    setSearchKw(searchRef.current.value);
    router.push({ query: { kw: searchRef.current.value } });
    localStorage.setItem("searchKw", searchRef.current.value);
  };

  if (error) return <div>Failed to load</div>;
  if (!data) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>udacity Pybo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <PyboNavBar />
        <Container className="my-3">
          <Row className="my-3">
            <Col className="col-6">
              <Button variant="primary" href="#">
                Write the Question
              </Button>
            </Col>
            <div className="col-6">
              <InputGroup>
                <input
                  type="text"
                  className="form-control"
                  ref={searchRef}
                  value={searchKw}
                  onChange={(e) => {
                    setSearchKw(e.target.value);
                  }}
                />
                <div className="input-group-append">
                  <Button variant="outline-secondary" onClick={handleSearchChange}>
                    Search
                  </Button>
                </div>
              </InputGroup>
            </div>
          </Row>
          <Table>
            <thead>
              <tr className="text-center table-dark">
                <th>No.</th>
                <th style={{ width: "50%" }}>Subject</th>
                <th>Writer</th>
                <th>Date</th>
              </tr>
            </thead>
            <tbody>
              {data.questions.map(function (question, i) {
                return (
                  <tr className="text-center" key={question.id}>
                    <td>{data.total - (data.page - 1) * data.per_page - i}</td>
                    <td className="text-start">
                      <Link href={`question/pyboQuestionDetail/?question_id=${question.id}`}>
                        {question.subject}
                      </Link>
                      {question.answer_set && question.answer_set.length > 0 && (
                        <span className="text-danger small mx-2">
                          {question.answer_set.length}
                        </span>
                      )}
                    </td>
                    <td>{question.user.username}</td>
                    <td>{new Date(question.create_date).toLocaleDateString()}</td>
                  </tr>
                );
              })}
            </tbody>
          </Table>

          <ul className="pagination justify-content-center">
            {data.has_prev ? (
              <li className="page-item">
                <a
                  className="page-link"
                  data-page={data.prev_num}
                  onClick={() => handlePageChange(data.prev_num)}
                >
                  Prev
                </a>
              </li>
            ) : (
              <li className="page-item disabled">
                <a className="page-link" tabIndex="-1" aria-disabled="true">
                  Prev
                </a>
              </li>
            )}
            {data.page_nums.map(function (page_num, i) {
              if (page_num) {
                if (page_num != data.page) {
                  return (
                    <li className="page-item" key={page_num}>
                      <a
                        className="page-link"
                        data-page={page_num}
                        onClick={() => handlePageChange(page_num)}
                      >
                        {page_num}
                      </a>
                    </li>
                  );
                } else {
                  return (
                    <li className="page-item active" aria-current="page" key={page_num}>
                      <a className="page-link">{page_num}</a>
                    </li>
                  );
                }
              } else {
                return (
                  <li className="disabled" key={Math.random()}>
                    <a className="page-link">...</a>
                  </li>
                );
              }
            })}
            {data.has_next ? (
              <li className="page-item">
                <a
                  className="page-link"
                  data-page={data.next_num}
                  onClick={() => handlePageChange(data.next_num)}
                >
                  Next
                </a>
              </li>
            ) : (
              <li className="page-item disabled">
                <a className="page-link" tabIndex="-1" aria-disabled="true">
                  Next
                </a>
              </li>
            )}
          </ul>
        </Container>
      </main>
    </>
  );
}
