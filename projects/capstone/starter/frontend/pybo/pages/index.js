import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import useSWR from "swr";
import { Container, Row, Col, Button } from "react-bootstrap";
import styles from "../styles/Home.module.css";
import PyboNavBar from "../components/pyboNavBar";
import Link from "next/link";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function Home() {
  // pageIndex
  const storedPage = typeof window !== "undefined" && localStorage.getItem("pageIndex");
  const [pageIndex, setPageIndex] = useState(storedPage || 1);

  // search
  const storedSearch = typeof window !== "undefined" && localStorage.getItem("searchKeyword");
  const [kw, setKw] = useState(storedSearch || "");

  const { data, error } = useSWR(
    `http://127.0.0.1:5000/question/list?page=${pageIndex}&kw=${kw}`,
    fetcher,
    { keepPreviousData: true },
  );

  const handlePageChange = (pageIndex) => {
    setPageIndex(pageIndex);
    localStorage.setItem("pageIndex", pageIndex);
  };

  const searchRef = useRef();
  const handleSearchChange = () => {
    const searchKeyword = searchRef.current.value;
    setKw(searchKeyword);
    localStorage.setItem("searchKeyword", searchKeyword);
  };

  if (error) return <div>Failed to load</div>;
  if (!data) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <PyboNavBar />
        <div className="container my-3">
          <div className="row my-3">
            <div className="col-6">
              <a href="#" className="btn btn-primary">
                질문 등록하기
              </a>
            </div>
            <div className="col-6">
              <div className="input-group">
                <input type="text" className="form-control" ref={searchRef}/>
                <div className="input-group-append">
                  <button className="btn btn-outline-secondary" type="button" onClick={handleSearchChange}>
                    찾기
                  </button>
                </div>
              </div>
            </div>
          </div>
          <table className="table">
            <thead>
              <tr className="text-center table-dark">
                <th>번호</th>
                <th style={{ width: "50%" }}>제목</th>
                <th>글쓴이</th>
                <th>작성일시</th>
              </tr>
            </thead>
            <tbody>
              {data.questions.map(function (question, i) {
                return (
                  <tr className="text-center" key={question.id}>
                    <td>{data.total - (data.page - 1) * data.per_page - i}</td>
                    <td className="text-start">
                      <Link href={`question/pyboQuestionDetail/?question_id=${question.id}`}>
                        {question.subject}
                      </Link>
                      {question.answer_set && question.answer_set.length > 0 && (
                        <span className="text-danger small mx-2">
                          {question.answer_set.length}
                        </span>
                      )}
                    </td>
                    <td>{question.user.username}</td>
                    <td>{new Date(question.create_date).toLocaleDateString()}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>

          <ul className="pagination justify-content-center">
            {data.has_prev ? (
              <li className="page-item">
                <a
                  className="page-link"
                  data-page={data.prev_num}
                  onClick={() => handlePageChange(pageIndex - 1)}
                >
                  이전
                </a>
              </li>
            ) : (
              <li className="page-item disabled">
                <a className="page-link" tabIndex="-1" aria-disabled="true">
                  이전
                </a>
              </li>
            )}
            {data.page_nums.map(function (page_num, i) {
              if (page_num) {
                if (page_num != data.page) {
                  return (
                    <li className="page-item" key={page_num}>
                      <a
                        className="page-link"
                        data-page={page_num}
                        onClick={() => handlePageChange(page_num)}
                      >
                        {page_num}
                      </a>
                    </li>
                  );
                } else {
                  return (
                    <li className="page-item active" aria-current="page" key={page_num}>
                      <a className="page-link">{page_num}</a>
                    </li>
                  );
                }
              } else {
                return (
                  <li className="disabled" key={page_num || i + "1"}>
                    <a className="page-link">...</a>
                  </li>
                );
              }
            })}
            {data.has_next ? (
              <li className="page-item">
                <a
                  className="page-link"
                  data-page={data.next_num}
                  onClick={() => handlePageChange(pageIndex + 1)}
                >
                  다음
                </a>
              </li>
            ) : (
              <li className="page-item disabled">
                <a className="page-link" tabIndex="-1" aria-disabled="true">
                  다음
                </a>
              </li>
            )}
          </ul>
        </div>
      </main>
    </>
  );
}
